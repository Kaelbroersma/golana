// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: trades.sql

package database

import (
	"context"
	"database/sql"
)

const createTrade = `-- name: CreateTrade :one
INSERT INTO trades (id, user_id, contract, open_quantity, open_price)
VALUES (?, ?, ?, ?, ?)
RETURNING id, user_id, contract, open_quantity, closed_quantity, open_price, average_close_price, unrealized_profit, realized_profit, created_at, updated_at
`

type CreateTradeParams struct {
	ID           string
	UserID       string
	Contract     string
	OpenQuantity float64
	OpenPrice    sql.NullFloat64
}

func (q *Queries) CreateTrade(ctx context.Context, arg CreateTradeParams) (Trade, error) {
	row := q.db.QueryRowContext(ctx, createTrade,
		arg.ID,
		arg.UserID,
		arg.Contract,
		arg.OpenQuantity,
		arg.OpenPrice,
	)
	var i Trade
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Contract,
		&i.OpenQuantity,
		&i.ClosedQuantity,
		&i.OpenPrice,
		&i.AverageClosePrice,
		&i.UnrealizedProfit,
		&i.RealizedProfit,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getClosedTrades = `-- name: GetClosedTrades :many
SELECT id, user_id, contract, open_quantity, closed_quantity, open_price, average_close_price, unrealized_profit, realized_profit, created_at, updated_at FROM trades WHERE user_id = ? AND sold_price IS NOT NULL
`

func (q *Queries) GetClosedTrades(ctx context.Context, userID string) ([]Trade, error) {
	rows, err := q.db.QueryContext(ctx, getClosedTrades, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Trade
	for rows.Next() {
		var i Trade
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Contract,
			&i.OpenQuantity,
			&i.ClosedQuantity,
			&i.OpenPrice,
			&i.AverageClosePrice,
			&i.UnrealizedProfit,
			&i.RealizedProfit,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOpenTrades = `-- name: GetOpenTrades :many
SELECT id, user_id, contract, open_quantity, closed_quantity, open_price, average_close_price, unrealized_profit, realized_profit, created_at, updated_at FROM trades WHERE user_id = ? AND open_quantity > 0
`

func (q *Queries) GetOpenTrades(ctx context.Context, userID string) ([]Trade, error) {
	rows, err := q.db.QueryContext(ctx, getOpenTrades, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Trade
	for rows.Next() {
		var i Trade
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Contract,
			&i.OpenQuantity,
			&i.ClosedQuantity,
			&i.OpenPrice,
			&i.AverageClosePrice,
			&i.UnrealizedProfit,
			&i.RealizedProfit,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTrade = `-- name: GetTrade :one
SELECT id, user_id, contract, open_quantity, closed_quantity, open_price, average_close_price, unrealized_profit, realized_profit, created_at, updated_at FROM trades WHERE id = ?
`

func (q *Queries) GetTrade(ctx context.Context, id string) (Trade, error) {
	row := q.db.QueryRowContext(ctx, getTrade, id)
	var i Trade
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Contract,
		&i.OpenQuantity,
		&i.ClosedQuantity,
		&i.OpenPrice,
		&i.AverageClosePrice,
		&i.UnrealizedProfit,
		&i.RealizedProfit,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTradesForUser = `-- name: GetTradesForUser :many
SELECT id, user_id, contract, open_quantity, closed_quantity, open_price, average_close_price, unrealized_profit, realized_profit, created_at, updated_at FROM trades WHERE user_id = ?
`

func (q *Queries) GetTradesForUser(ctx context.Context, userID string) ([]Trade, error) {
	rows, err := q.db.QueryContext(ctx, getTradesForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Trade
	for rows.Next() {
		var i Trade
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Contract,
			&i.OpenQuantity,
			&i.ClosedQuantity,
			&i.OpenPrice,
			&i.AverageClosePrice,
			&i.UnrealizedProfit,
			&i.RealizedProfit,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserTrades = `-- name: GetUserTrades :many
SELECT id, user_id, contract, open_quantity, closed_quantity, open_price, average_close_price, unrealized_profit, realized_profit, created_at, updated_at FROM trades WHERE user_id = ?
`

func (q *Queries) GetUserTrades(ctx context.Context, userID string) ([]Trade, error) {
	rows, err := q.db.QueryContext(ctx, getUserTrades, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Trade
	for rows.Next() {
		var i Trade
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Contract,
			&i.OpenQuantity,
			&i.ClosedQuantity,
			&i.OpenPrice,
			&i.AverageClosePrice,
			&i.UnrealizedProfit,
			&i.RealizedProfit,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTrade = `-- name: UpdateTrade :one
UPDATE trades SET open_quantity = ?, closed_quantity = ?, average_close_price = ?, realized_profit = ? WHERE id = ?
RETURNING id, user_id, contract, open_quantity, closed_quantity, open_price, average_close_price, unrealized_profit, realized_profit, created_at, updated_at
`

type UpdateTradeParams struct {
	OpenQuantity      float64
	ClosedQuantity    sql.NullFloat64
	AverageClosePrice sql.NullFloat64
	RealizedProfit    sql.NullFloat64
	ID                string
}

func (q *Queries) UpdateTrade(ctx context.Context, arg UpdateTradeParams) (Trade, error) {
	row := q.db.QueryRowContext(ctx, updateTrade,
		arg.OpenQuantity,
		arg.ClosedQuantity,
		arg.AverageClosePrice,
		arg.RealizedProfit,
		arg.ID,
	)
	var i Trade
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Contract,
		&i.OpenQuantity,
		&i.ClosedQuantity,
		&i.OpenPrice,
		&i.AverageClosePrice,
		&i.UnrealizedProfit,
		&i.RealizedProfit,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
