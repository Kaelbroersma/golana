// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: contracts.sql

package database

import (
	"context"
)

const createContract = `-- name: CreateContract :one
INSERT INTO contracts (
    contract_id,
    name
) VALUES (
    ?, ?
) RETURNING contract_id, name, websocket_open, created_at, updated_at
`

type CreateContractParams struct {
	ContractID string
	Name       string
}

func (q *Queries) CreateContract(ctx context.Context, arg CreateContractParams) (Contract, error) {
	row := q.db.QueryRowContext(ctx, createContract, arg.ContractID, arg.Name)
	var i Contract
	err := row.Scan(
		&i.ContractID,
		&i.Name,
		&i.WebsocketOpen,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getContractByID = `-- name: GetContractByID :one
SELECT contract_id, name, websocket_open, created_at, updated_at FROM contracts WHERE contract_id = ?
`

func (q *Queries) GetContractByID(ctx context.Context, contractID string) (Contract, error) {
	row := q.db.QueryRowContext(ctx, getContractByID, contractID)
	var i Contract
	err := row.Scan(
		&i.ContractID,
		&i.Name,
		&i.WebsocketOpen,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getContractByName = `-- name: GetContractByName :one
SELECT contract_id, name, websocket_open, created_at, updated_at FROM contracts WHERE name = ?
`

func (q *Queries) GetContractByName(ctx context.Context, name string) (Contract, error) {
	row := q.db.QueryRowContext(ctx, getContractByName, name)
	var i Contract
	err := row.Scan(
		&i.ContractID,
		&i.Name,
		&i.WebsocketOpen,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
