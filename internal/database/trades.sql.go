// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: trades.sql

package database

import (
	"context"
	"database/sql"
)

const createTrade = `-- name: CreateTrade :one
INSERT INTO trades (id, user_id, contract, side, quantity, bought_price, sold_price)
VALUES (?, ?, ?, ?, ?, ?, ?)
RETURNING id, user_id, contract, side, quantity, bought_price, sold_price, created_at, updated_at
`

type CreateTradeParams struct {
	ID          string
	UserID      string
	Contract    string
	Side        string
	Quantity    float64
	BoughtPrice sql.NullFloat64
	SoldPrice   sql.NullFloat64
}

func (q *Queries) CreateTrade(ctx context.Context, arg CreateTradeParams) (Trade, error) {
	row := q.db.QueryRowContext(ctx, createTrade,
		arg.ID,
		arg.UserID,
		arg.Contract,
		arg.Side,
		arg.Quantity,
		arg.BoughtPrice,
		arg.SoldPrice,
	)
	var i Trade
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Contract,
		&i.Side,
		&i.Quantity,
		&i.BoughtPrice,
		&i.SoldPrice,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getClosedTrades = `-- name: GetClosedTrades :many
SELECT id, user_id, contract, side, quantity, bought_price, sold_price, created_at, updated_at FROM trades WHERE user_id = ? AND sold_price IS NOT NULL
`

func (q *Queries) GetClosedTrades(ctx context.Context, userID string) ([]Trade, error) {
	rows, err := q.db.QueryContext(ctx, getClosedTrades, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Trade
	for rows.Next() {
		var i Trade
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Contract,
			&i.Side,
			&i.Quantity,
			&i.BoughtPrice,
			&i.SoldPrice,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOpenTrades = `-- name: GetOpenTrades :many
SELECT id, user_id, contract, side, quantity, bought_price, sold_price, created_at, updated_at FROM trades WHERE user_id = ? AND sold_price IS NULL
`

func (q *Queries) GetOpenTrades(ctx context.Context, userID string) ([]Trade, error) {
	rows, err := q.db.QueryContext(ctx, getOpenTrades, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Trade
	for rows.Next() {
		var i Trade
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Contract,
			&i.Side,
			&i.Quantity,
			&i.BoughtPrice,
			&i.SoldPrice,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTrade = `-- name: GetTrade :one
SELECT id, user_id, contract, side, quantity, bought_price, sold_price, created_at, updated_at FROM trades WHERE id = ?
`

func (q *Queries) GetTrade(ctx context.Context, id string) (Trade, error) {
	row := q.db.QueryRowContext(ctx, getTrade, id)
	var i Trade
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Contract,
		&i.Side,
		&i.Quantity,
		&i.BoughtPrice,
		&i.SoldPrice,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserTrades = `-- name: GetUserTrades :many
SELECT id, user_id, contract, side, quantity, bought_price, sold_price, created_at, updated_at FROM trades WHERE user_id = ?
`

func (q *Queries) GetUserTrades(ctx context.Context, userID string) ([]Trade, error) {
	rows, err := q.db.QueryContext(ctx, getUserTrades, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Trade
	for rows.Next() {
		var i Trade
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Contract,
			&i.Side,
			&i.Quantity,
			&i.BoughtPrice,
			&i.SoldPrice,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTrade = `-- name: UpdateTrade :one
UPDATE trades SET side = ?, quantity = ?, bought_price = ?, sold_price = ? WHERE id = ?
RETURNING id, user_id, contract, side, quantity, bought_price, sold_price, created_at, updated_at
`

type UpdateTradeParams struct {
	Side        string
	Quantity    float64
	BoughtPrice sql.NullFloat64
	SoldPrice   sql.NullFloat64
	ID          string
}

func (q *Queries) UpdateTrade(ctx context.Context, arg UpdateTradeParams) (Trade, error) {
	row := q.db.QueryRowContext(ctx, updateTrade,
		arg.Side,
		arg.Quantity,
		arg.BoughtPrice,
		arg.SoldPrice,
		arg.ID,
	)
	var i Trade
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Contract,
		&i.Side,
		&i.Quantity,
		&i.BoughtPrice,
		&i.SoldPrice,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
